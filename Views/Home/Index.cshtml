@model bike.ViewModel.XeMayLoaiXe
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_HomePage.cshtml";
    var banners = ViewBag.Banners as List<bike.Models.Banner>;
}

<!-- Banner Carousel Section -->
@if (banners != null && banners.Any())
{
    <section class="banner-carousel carousel-cover">
        <div id="bannerCarousel" class="carousel slide carousel-cover" data-bs-ride="carousel" data-bs-interval="2000" data-bs-pause="hover" data-bs-wrap="true">
            <div class="carousel-indicators">
                @for (int i = 0; i < banners.Count; i++)
                {
                    <button type="button" data-bs-target="#bannerCarousel" data-bs-slide-to="@i" 
                            class="@(i == 0 ? "active" : "")" aria-current="true" aria-label="Banner @(i+1)"></button>
                }
            </div>
            
            <div class="carousel-inner">
                @for (int i = 0; i < banners.Count; i++)
                {
                    var banner = banners[i];
                    <div class="carousel-item @(i == 0 ? "active" : "")">
                        @if (!string.IsNullOrEmpty(banner.LinkLienKet))
                        {
                            <a href="@banner.LinkLienKet" target="_blank">
                                <img src="/images/banner/@banner.HinhAnh" class="d-block w-100 banner-image" 
                                     alt="@banner.TieuDe" onerror="this.src='/images/default.jpg';">
                            </a>
                        }
                        else
                        {
                            <img src="/images/banner/@banner.HinhAnh" class="d-block w-100 banner-image" 
                                 alt="@banner.TieuDe" onerror="this.src='/images/default.jpg';">
                        }
                        
                        @if (!string.IsNullOrEmpty(banner.TieuDe) || !string.IsNullOrEmpty(banner.MoTa))
                        {
                            <div class="carousel-caption d-none d-md-block">
                                @if (!string.IsNullOrEmpty(banner.TieuDe))
                                {
                                    <h3 class="banner-title">@banner.TieuDe</h3>
                                }
                                @if (!string.IsNullOrEmpty(banner.MoTa))
                                {
                                    <p class="banner-description">@banner.MoTa</p>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
            
            <button class="carousel-control-prev" type="button" data-bs-target="#bannerCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#bannerCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>
    </section>
}
else
{
    <!-- Hero Section hiển thị khi không có banner -->
    <section class="hero-section">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-6 hero-image">
                    <img src="images/cr7.jpg" alt="Woman with helmet" />
                </div>
                <div class="col-lg-6">
                    <h1 class="hero-title">CHO THUÊ XE MÁY<br />SÀI GÒN</h1>
                    <ul class="hero-features">
                        <li>Cam kết xe tốt</li>
                        <li>Giao xe theo yêu cầu</li>
                        <li>Giá rẻ nhất</li>
                        <li>Thủ tục đơn giản</li>
                    </ul>
                    <button class="phone-button">
                        <i class="bi bi-telephone-fill"></i> 0908 630 065
                    </button>
                </div>
            </div>
        </div>
    </section>
}

<section class="container my-5">
    @if (ViewBag.LoaiXeSelected != null)
    {
        var selectedLoai = Model.DanhSachLoaiXe.FirstOrDefault(l => l.MaLoaiXe == ViewBag.LoaiXeSelected);
        if (selectedLoai != null)
        {
            <div class="alert alert-info d-flex justify-content-between align-items-center mb-4">
                <div>
                    <i class="bi bi-funnel"></i> 
                    Đang hiển thị xe loại: <strong>@selectedLoai.TenLoaiXe</strong>
                </div>
                <a href="@Url.Action("Index", "Home")" class="btn btn-sm btn-outline-primary">
                    <i class="bi bi-x-circle"></i> Xem tất cả
                </a>
            </div>
        }
    }

    <h2 class="section-title">
        @if (ViewBag.LoaiXeSelected != null)
        {
            var selectedLoai = Model.DanhSachLoaiXe.FirstOrDefault(l => l.MaLoaiXe == ViewBag.LoaiXeSelected);
            @($"XE {selectedLoai?.TenLoaiXe?.ToUpper()}")
        }
        else
        {
            <text>XE THUÊ NHIỀU NHẤT</text>
        }
    </h2>

    <div class="filter-section mb-4">
        <div class="row">
            <div class="col-md-8">
                <div class="tab-buttons">
                    <button class="tab-btn @(ViewBag.LoaiXeSelected == null ? "active" : "")" data-loaixe="all">
                        <i class="bi bi-grid"></i> Tất cả
                    </button>
                    @foreach (var item in Model.DanhSachLoaiXe)
                    {
                        <button class="tab-btn @(ViewBag.LoaiXeSelected == item.MaLoaiXe ? "active" : "")" data-loaixe="@item.MaLoaiXe">
                            @item.TenLoaiXe
                        </button>
                    }
                </div>
            </div>
            <div class="col-md-4">
                <div class="search-box">
                    <div class="search-container">
                        <input type="text" id="bike-search" class="search-input" placeholder="Tìm kiếm xe...">
                        <button class="search-btn" type="button" onclick="searchBikes()">
                            <i class="bi bi-search"></i>
                        </button>
                        <button class="clear-btn" type="button" onclick="clearSearch()" style="display: none;">
                            <i class="bi bi-x-circle-fill"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-4" id="bike-container">
        @foreach (var item in Model.DanhSachXeMay)
        {
            <div class="col-md-3 bike-item" data-loaixe="@item.MaLoaiXe" data-tenxe="@(item.TenXe?.ToLower() ?? "")" data-gia="@item.GiaThue">
                <div class="bike-card">
                    <img src="@(string.IsNullOrEmpty(item.HinhAnhHienThi) ? "/images/default.jpg" : $"/images/xe/{item.HinhAnhHienThi}")"
                         alt="@item.TenXe" class="vehicle-image" onclick="window.location.href='@Url.Action("XemChiTiet", "Home", new { id = item.MaXe })'" style="cursor: pointer;">
                    <div class="bike-info">
                        <h3 class="bike-name">
                            <a asp-action="XemChiTiet" asp-route-id="@item.MaXe" class="text-decoration-none text-dark">
                                Thuê Xe @item.TenXe
                            </a>
                        </h3>
                        <p class="bike-price">Giá thuê từ: @item.GiaThue.ToString("N0")đ / ngày</p>
                        <p class="bike-status">
                            Trạng thái:
                            <span class="@(item.TrangThai == "Sẵn sàng" ? "text-success" : item.TrangThai == "Đang thuê" ? "text-warning" : "text-danger")">
                                @item.TrangThai
                            </span>
                        </p>
                        @if (item.TrangThai == "Sẵn sàng")
                        {
                            <div class="bike-actions mt-2">
                                <button class="btn btn-sm btn-outline-primary" onclick="showQuickBookingModal(@item.MaXe, '@item.TenXe', @item.GiaThue, '@item.HinhAnhHienThi')" style="margin-right: 8px;">
                                    <i class="bi bi-cart-plus"></i> Thêm vào giỏ
                                </button>
                                <a asp-action="XemChiTiet" asp-route-id="@item.MaXe" class="btn btn-sm btn-primary">
                                    <i class="bi bi-eye"></i> Xem chi tiết
                                </a>
                            </div>
                        }
                        else
                        {
                            <div class="bike-actions mt-2">
                                <a asp-action="XemChiTiet" asp-route-id="@item.MaXe" class="btn btn-sm btn-outline-secondary">
                                    <i class="bi bi-eye"></i> Xem chi tiết
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</section>

<!-- Quick Booking Modal -->
<div class="modal fade" id="quickBookingModal" tabindex="-1" aria-labelledby="quickBookingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="quickBookingModalLabel">
                    <i class="bi bi-cart-plus"></i> Thêm vào giỏ xe
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3 text-center">
                    <img id="modalVehicleImage" src="" alt="" class="img-thumbnail" style="width: 100px; height: 80px; object-fit: cover;">
                    <h6 id="modalVehicleName" class="mt-2"></h6>
                </div>
                <form id="addToCartForm">
                    <div class="mb-3">
                        <label class="form-label">Ngày nhận xe</label>
                        <input type="date" class="form-control" id="ngayNhanXe" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Ngày trả xe</label>
                        <input type="date" class="form-control" id="ngayTraXe" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Ghi chú (tùy chọn)</label>
                        <textarea class="form-control" id="ghiChu" rows="2" placeholder="Nhập ghi chú nếu có..."></textarea>
                    </div>
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i> Số ngày thuê: <span id="soNgayThue">0</span> ngày<br>
                        <i class="bi bi-cash"></i> Tổng tiền dự kiến: <span id="tongTien">0đ</span>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" onclick="addToCart()">
                    <i class="bi bi-cart-plus"></i> Thêm vào giỏ
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentVehicleId = 0;
        let currentVehiclePrice = 0;

        // Enhanced Script để xử lý tab buttons với client-side filtering
        $(document).ready(function() {
            // Real-time filtering thay vì reload trang
            $('.tab-btn').click(function(e) {
                e.preventDefault();
                var maLoaiXe = $(this).data('loaixe');
                
                // Cập nhật active state cho tab
                $('.tab-btn').removeClass('active');
                $(this).addClass('active');
                
                // Thực hiện filtering client-side
                filterBikes(maLoaiXe);
                
                // Cập nhật URL without reload (History API)
                var newUrl = maLoaiXe === 'all' ? 
                    '@Url.Action("Index", "Home")' : 
                    '@Url.Action("Index", "Home")' + '?loaiXe=' + maLoaiXe;
                
                window.history.pushState({loaiXe: maLoaiXe}, '', newUrl);
                
                                 // Cập nhật section title
                 updateSectionTitle(maLoaiXe);
                 
                 // Hiển thị notification
                 showFilterNotification(maLoaiXe);
             });

            // Handle browser back/forward buttons
            window.addEventListener('popstate', function(e) {
                if (e.state && e.state.loaiXe) {
                    var maLoaiXe = e.state.loaiXe;
                    $('.tab-btn').removeClass('active');
                    $(`.tab-btn[data-loaixe="${maLoaiXe}"]`).addClass('active');
                    filterBikes(maLoaiXe);
                    updateSectionTitle(maLoaiXe);
                }
            });

            // Khởi tạo filtering cho trang load - sử dụng instant version
            @if (ViewBag.LoaiXeSelected != null)
            {
                <text>
                // Auto-filter on page load based on URL parameter
                filterBikesInstant('@ViewBag.LoaiXeSelected');
                </text>
            }
            else
            {
                <text>
                // Filter all bikes on initial load
                filterBikesInstant('all');
                </text>
            }
        });

        // Function để lọc xe ngay lập tức (không animation) - dùng cho initial load
        function filterBikesInstant(maLoaiXe) {
            const searchTerm = document.getElementById('bike-search').value.toLowerCase();
            const bikeItems = document.querySelectorAll('.bike-item');
            let visibleCount = 0;

            bikeItems.forEach(function(item) {
                const itemLoaiXe = item.getAttribute('data-loaixe');
                const itemTenXe = item.getAttribute('data-tenxe');
                
                const matchesCategory = maLoaiXe === 'all' || String(itemLoaiXe) === String(maLoaiXe);
                const matchesSearch = !searchTerm || itemTenXe.includes(searchTerm);
                const shouldShow = matchesCategory && matchesSearch;
                
                if (shouldShow) {
                    item.style.display = 'block';
                    item.style.opacity = '1';
                    item.style.transform = 'translateY(0) scale(1)';
                    item.style.transition = 'none'; // Tắt transition
                    visibleCount++;
                } else {
                    item.style.display = 'none';
                    item.style.opacity = '0';
                    item.style.transition = 'none'; // Tắt transition
                }
            });

            // Khôi phục transition sau khi set xong
            setTimeout(() => {
                bikeItems.forEach(function(item) {
                    item.style.transition = 'all 0.25s cubic-bezier(0.4, 0, 0.2, 1)';
                });
            }, 50);

            // Cập nhật counter ngay lập tức
            updateBikeCounter(visibleCount, maLoaiXe, searchTerm);
        }

        // Enhanced function để lọc xe theo loại và tìm kiếm với animations
        function filterBikes(maLoaiXe) {
            const searchTerm = document.getElementById('bike-search').value.toLowerCase();
            const bikeItems = document.querySelectorAll('.bike-item');
            const bikeContainer = document.getElementById('bike-container');

            // Tạo array để track visible items
            const visibleItems = [];
            const hiddenItems = [];

            bikeItems.forEach(function(item, index) {
                const itemLoaiXe = item.getAttribute('data-loaixe');
                const itemTenXe = item.getAttribute('data-tenxe');
                
                // Đảm bảo so sánh cùng kiểu dữ liệu - convert về string để so sánh
                const matchesCategory = maLoaiXe === 'all' || String(itemLoaiXe) === String(maLoaiXe);
                const matchesSearch = !searchTerm || itemTenXe.includes(searchTerm);
                const shouldShow = matchesCategory && matchesSearch;
                
                if (shouldShow) {
                    visibleItems.push(item);
                } else {
                    hiddenItems.push(item);
                }
            });

            // Ẩn items không match trước với animation nhanh hơn
            hiddenItems.forEach(function(item) {
                item.style.opacity = '0';
                item.style.transform = 'translateY(10px) scale(0.95)';
                item.style.transition = 'all 0.2s ease';
                
                setTimeout(() => {
                    item.style.display = 'none';
                }, 150);
            });

            // Hiển thị items match với stagger animation nhanh hơn
            setTimeout(() => {
                visibleItems.forEach(function(item, index) {
                    item.style.display = 'block';
                    item.style.transition = 'all 0.25s cubic-bezier(0.4, 0, 0.2, 1)';
                    
                    setTimeout(() => {
                        item.style.opacity = '1';
                        item.style.transform = 'translateY(0) scale(1)';
                    }, index * 25); // Giảm delay từ 80ms xuống 25ms
                });

                // Cập nhật counter sớm hơn và không block container
                setTimeout(() => {
                    updateBikeCounter(visibleItems.length, maLoaiXe, searchTerm);
                }, Math.min(visibleItems.length * 25, 300)); // Tối đa 300ms
            }, 100);
        }

        // Function để cập nhật tiêu đề section khi thay đổi loại xe
        function updateSectionTitle(maLoaiXe) {
            const sectionTitle = document.querySelector('.section-title');
            const loaiXeData = {
                @foreach (var item in Model.DanhSachLoaiXe)
                {
                    <text>'@item.MaLoaiXe': '@item.TenLoaiXe',</text>
                }
            };
            
            if (sectionTitle) {
                if (maLoaiXe === 'all') {
                    sectionTitle.innerHTML = '<i class="bi bi-grid-fill"></i> XE THUÊ NHIỀU NHẤT';
                } else {
                    const tenLoaiXe = loaiXeData[maLoaiXe];
                    sectionTitle.innerHTML = `<i class="bi bi-collection-fill"></i> XE ${tenLoaiXe ? tenLoaiXe.toUpperCase() : 'ĐƯỢC CHỌN'}`;
                }
                
                // Thêm animation cho title
                sectionTitle.style.transform = 'translateY(-10px)';
                sectionTitle.style.opacity = '0.7';
                
                setTimeout(() => {
                    sectionTitle.style.transform = 'translateY(0)';
                    sectionTitle.style.opacity = '1';
                }, 200);
            }
        }

        // Function để search xe theo tên
        function searchBikes() {
            const activeCategory = document.querySelector('.tab-btn.active').getAttribute('data-loaixe');
            filterBikes(activeCategory);
        }

        // Function để clear search
        function clearSearch() {
            document.getElementById('bike-search').value = '';
            const activeCategory = document.querySelector('.tab-btn.active').getAttribute('data-loaixe');
            filterBikes(activeCategory);
        }



        // Function để clear search
        function clearSearch() {
            const searchInput = document.getElementById('bike-search');
            const clearBtn = document.querySelector('.clear-btn');
            
            searchInput.value = '';
            clearBtn.style.display = 'none';
            
            const activeCategory = document.querySelector('.tab-btn.active').getAttribute('data-loaixe');
            filterBikes(activeCategory);
        }

        // Function để show/hide clear button
        function toggleClearButton() {
            const searchInput = document.getElementById('bike-search');
            const clearBtn = document.querySelector('.clear-btn');
            
            if (searchInput.value.trim().length > 0) {
                clearBtn.style.display = 'flex';
            } else {
                clearBtn.style.display = 'none';
            }
        }

        // Enhanced function để cập nhật counter hiển thị với animations
        function updateBikeCounter(count, categoryName, searchTerm = '') {
            let counterElement = document.getElementById('bike-counter');
            if (!counterElement) {
                // Tạo counter element nếu chưa có
                counterElement = document.createElement('div');
                counterElement.id = 'bike-counter';
                counterElement.className = 'bike-counter mb-3';
                
                const container = document.getElementById('bike-container');
                container.parentNode.insertBefore(counterElement, container);
            }

            // Tạo loại xe lookup
            const loaiXeData = {
                @foreach (var item in Model.DanhSachLoaiXe)
                {
                    <text>'@item.MaLoaiXe': '@item.TenLoaiXe',</text>
                }
            };

            let displayText = '';
            let iconClass = '';
            let badgeClass = '';
            
            if (searchTerm) {
                iconClass = 'bi-search';
                badgeClass = count > 0 ? 'success' : 'warning';
                displayText = `
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="d-flex align-items-center">
                            <i class="bi ${iconClass} me-2"></i>
                            <span>Tìm thấy <strong class="text-primary">${count}</strong> xe với từ khóa "<strong class="text-info">${searchTerm}</strong>"</span>
                        </div>
                        <span class="badge bg-${badgeClass}">${count}</span>
                    </div>
                `;
            } else {
                const categoryText = categoryName === 'all' ? 'tất cả loại' : (loaiXeData[categoryName] || 'loại đã chọn');
                iconClass = categoryName === 'all' ? 'bi-grid-fill' : 'bi-collection-fill';
                badgeClass = count > 0 ? 'primary' : 'secondary';
                displayText = `
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="d-flex align-items-center">
                            <i class="bi ${iconClass} me-2"></i>
                            <span>Hiển thị <strong class="text-primary">${count}</strong> xe thuộc <strong class="text-info">${categoryText}</strong></span>
                        </div>
                        <span class="badge bg-${badgeClass}">${count}</span>
                    </div>
                `;
            }
            
            // Animation cho counter
            counterElement.style.transform = 'translateY(-10px)';
            counterElement.style.opacity = '0.5';
            
            setTimeout(() => {
                counterElement.innerHTML = displayText;
                counterElement.style.transform = 'translateY(0)';
                counterElement.style.opacity = '1';
                         }, 150);
         }

        // Function để hiển thị notification khi thay đổi filter
        function showFilterNotification(maLoaiXe) {
            const loaiXeData = {
                @foreach (var item in Model.DanhSachLoaiXe)
                {
                    <text>'@item.MaLoaiXe': '@item.TenLoaiXe',</text>
                }
            };
            
            const notification = document.createElement('div');
            notification.className = 'notification';
            
            let message = '';
            if (maLoaiXe === 'all') {
                message = '<i class="bi bi-grid-fill me-2"></i>Hiển thị tất cả xe';
            } else {
                const tenLoaiXe = loaiXeData[maLoaiXe] || 'Loại xe';
                message = `<i class="bi bi-collection-fill me-2"></i>Lọc theo: ${tenLoaiXe}`;
            }
            
            notification.innerHTML = message;
            document.body.appendChild(notification);
            
            // Tự động xóa notification sau 2 giây
            setTimeout(() => {
                notification.style.animation = 'slideInRight 0.3s ease-out reverse';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }, 2000);
        }

        // Khởi tạo filter khi trang load
        document.addEventListener('DOMContentLoaded', function() {
                         // Thêm CSS cho animation và giao diện
            const style = document.createElement('style');
            style.textContent = `
                .bike-item {
                    opacity: 1;
                    transform: translateY(0);
                    transition: all 0.25s ease;
                    pointer-events: auto !important; /* Đảm bảo luôn có thể click */
                }
                
                .vehicle-image {
                    pointer-events: auto !important; /* Đảm bảo hình xe luôn có thể click */
                    cursor: pointer !important;
                    transition: all 0.2s ease;
                }
                
                .bike-counter {
                    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                    padding: 15px 20px;
                    border-radius: 12px;
                    border-left: 4px solid #007bff;
                    font-size: 14px;
                    color: #495057;
                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                    position: relative;
                    overflow: hidden;
                }
                
                .bike-counter::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background: linear-gradient(45deg, transparent 0%, rgba(0, 123, 255, 0.05) 100%);
                    transition: all 0.3s ease;
                }
                
                .bike-counter:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 4px 20px rgba(0, 123, 255, 0.2);
                }
                
                .bike-counter:hover::before {
                    background: linear-gradient(45deg, transparent 0%, rgba(0, 123, 255, 0.1) 100%);
                }
                
                .bike-counter .badge {
                    font-size: 12px;
                    padding: 6px 12px;
                    border-radius: 20px;
                    font-weight: 600;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                    animation: pulse 2s infinite;
                }
                
                @@keyframes pulse {
                    0%, 100% { transform: scale(1); }
                    50% { transform: scale(1.05); }
                }
                
                .section-title {
                    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                    position: relative;
                    display: inline-flex;
                    align-items: center;
                    gap: 10px;
                }
                
                .section-title i {
                    font-size: 1.2em;
                    color: #007bff;
                }

                .tab-btn {
                    transition: all 0.3s ease;
                    position: relative;
                    overflow: hidden;
                }

                .tab-btn:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 4px 12px rgba(0,123,255,0.3);
                }

                .tab-btn.active {
                    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
                    color: white;
                    transform: translateY(-2px);
                    box-shadow: 0 4px 12px rgba(0,123,255,0.4);
                }

                .tab-btn::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: -100%;
                    width: 100%;
                    height: 100%;
                    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
                    transition: left 0.5s ease;
                }

                .tab-btn:hover::before {
                    left: 100%;
                }

                .filter-section {
                    background: #f8f9fa;
                    padding: 20px;
                    border-radius: 10px;
                    border: 1px solid #e9ecef;
                }

                .search-container {
                    position: relative;
                    display: flex;
                    align-items: center;
                    background: white;
                    border: 2px solid #e9ecef;
                    border-radius: 25px;
                    padding: 5px 15px;
                    transition: all 0.3s ease;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    transform: scale(1);
                }

                .search-container:hover {
                    border-color: #007bff;
                    box-shadow: 0 4px 15px rgba(0,123,255,0.2);
                }

                .search-container:focus-within {
                    border-color: #007bff;
                    box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
                    background: #f8f9fa;
                }
                
                .search-container.searching {
                    position: relative;
                }
                
                .search-container.searching::after {
                    content: '';
                    position: absolute;
                    top: 50%;
                    right: 60px;
                    width: 16px;
                    height: 16px;
                    border: 2px solid #007bff;
                    border-top: 2px solid transparent;
                    border-radius: 50%;
                    animation: spin 1s linear infinite;
                }
                
                @@keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
                
                .bike-item {
                    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
                    pointer-events: auto !important; /* Đảm bảo luôn có thể click */
                }
                
                .bike-card {
                    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
                    transform-origin: center;
                    pointer-events: auto !important; /* Đảm bảo luôn có thể click */
                }
                
                .bike-card:hover {
                    transform: translateY(-5px) scale(1.01);
                    box-shadow: 0 6px 20px rgba(0, 123, 255, 0.2);
                }
                
                .filter-section {
                    position: relative;
                    z-index: 10;
                }
                
                .tab-btn {
                    position: relative;
                    z-index: 1;
                }
                
                .tab-btn.active {
                    z-index: 2;
                }
                
                .notification {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 12px 20px;
                    background: #007bff;
                    color: white;
                    border-radius: 8px;
                    box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
                    z-index: 9999;
                    animation: slideInRight 0.3s ease-out;
                    font-size: 14px;
                    font-weight: 500;
                }
                
                @@keyframes slideInRight {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }

                .search-input {
                    flex: 1;
                    border: none;
                    outline: none;
                    padding: 10px 15px;
                    font-size: 16px;
                    background: transparent;
                    color: #495057;
                }

                .search-input::placeholder {
                    color: #6c757d;
                    font-style: italic;
                }

                .search-btn {
                    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
                    color: white;
                    border: none;
                    border-radius: 50%;
                    width: 40px;
                    height: 40px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    margin-left: 10px;
                }

                .search-btn:hover {
                    transform: scale(1.1);
                    box-shadow: 0 4px 12px rgba(0,123,255,0.4);
                }

                .clear-btn {
                    background: #dc3545;
                    color: white;
                    border: none;
                    border-radius: 50%;
                    width: 25px;
                    height: 25px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    margin-left: 5px;
                    font-size: 12px;
                }

                .clear-btn:hover {
                    background: #c82333;
                    transform: scale(1.1);
                }

                 @@media (max-width: 768px) {
                     .filter-section .row {
                         flex-direction: column-reverse;
                     }
                     
                     .search-box {
                         margin-bottom: 15px;
                     }

                     .search-container {
                         border-radius: 20px;
                         padding: 3px 10px;
                     }

                     .search-input {
                         padding: 8px 10px;
                         font-size: 14px;
                     }

                     .search-btn {
                         width: 35px;
                         height: 35px;
                         margin-left: 5px;
                     }

                     .clear-btn {
                         width: 22px;
                         height: 22px;
                         font-size: 11px;
                     }
                 }
             `;
             document.head.appendChild(style);

             // Khởi tạo hiển thị tất cả xe - không animation để tránh delay
             console.log('🚀 Initializing bikes instantly...');
             filterBikesInstant('all');
             console.log('✅ Bikes ready for interaction immediately!');

             // Setup search functionality
             const searchInput = document.getElementById('bike-search');
             if (searchInput) {
                 // Real-time search khi gõ với debouncing
                 searchInput.addEventListener('input', function() {
                     // Show/hide clear button
                     toggleClearButton();
                     
                     // Debounce để tránh gọi quá nhiều lần
                     clearTimeout(this.searchTimeout);
                     
                     // Thêm loading indicator cho search
                     const searchContainer = this.parentElement;
                     searchContainer.classList.add('searching');
                     
                     this.searchTimeout = setTimeout(() => {
                         const activeCategory = document.querySelector('.tab-btn.active').getAttribute('data-loaixe');
                         filterBikes(activeCategory);
                         searchContainer.classList.remove('searching');
                     }, 150); // Giảm debounce từ 300ms xuống 150ms
                 });

                 // Search khi nhấn Enter
                 searchInput.addEventListener('keypress', function(e) {
                     if (e.key === 'Enter') {
                         e.preventDefault();
                         clearTimeout(this.searchTimeout);
                         searchBikes();
                     }
                 });

                 // Focus animation
                 searchInput.addEventListener('focus', function() {
                     this.parentElement.style.transform = 'scale(1.02)';
                 });

                 searchInput.addEventListener('blur', function() {
                     this.parentElement.style.transform = 'scale(1)';
                 });
             }
         });

        // Initialize banner carousel with custom cover effect
        document.addEventListener('DOMContentLoaded', function() {
            const bannerCarousel = document.getElementById('bannerCarousel');
            if (bannerCarousel) {
                // Initialize Bootstrap carousel with infinite loop
                const carousel = new bootstrap.Carousel(bannerCarousel, {
                    interval: 2000,
                    wrap: true,          // Infinite loop - từ cuối quay về đầu
                    keyboard: true,
                    pause: 'hover',
                    ride: 'carousel',
                    touch: true
                });
                
                // Custom cover transition handler with infinite loop support
                bannerCarousel.addEventListener('slide.bs.carousel', function (e) {
                    const items = bannerCarousel.querySelectorAll('.carousel-item');
                    const activeIndex = Array.from(items).findIndex(item => item.classList.contains('active'));
                    const nextIndex = e.to;
                    const nextItem = items[nextIndex];
                    const totalItems = items.length;
                    
                    // Log transition for debugging
                    const isWrapping = (activeIndex === totalItems - 1) && (nextIndex === 0);
                    console.log(`Cover transition: ${activeIndex + 1} → ${nextIndex + 1}${isWrapping ? ' (Wrapping to start)' : ''}`);
                    
                    // Add smooth transition class
                    items.forEach(item => {
                        item.classList.add('carousel-cover-transition');
                    });
                    
                    // Reset all items position
                    items.forEach((item, index) => {
                        if (index === activeIndex) {
                            // Current item stays visible
                            item.style.transform = 'translateX(0)';
                            item.style.zIndex = '1';
                        } else if (index === nextIndex) {
                            // Next item starts off-screen (right) - works for wrapping too
                            item.style.transform = 'translateX(100%)';
                            item.style.zIndex = '2';
                        } else {
                            // All other items off-screen
                            item.style.transform = 'translateX(100%)';
                            item.style.zIndex = '0';
                        }
                    });
                    
                    // Trigger the cover animation (same effect for normal and wrap transitions)
                    setTimeout(() => {
                        if (nextItem) {
                            nextItem.style.transform = 'translateX(0)';
                            nextItem.style.zIndex = '2';
                        }
                    }, 50);
                });
                
                // Initialize first item
                const firstItem = bannerCarousel.querySelector('.carousel-item.active');
                if (firstItem) {
                    firstItem.style.transform = 'translateX(0)';
                    firstItem.style.zIndex = '2';
                }
                
                // Force start auto-cycling
                carousel.cycle();
                
                // Fallback auto-cycling mechanism with infinite loop
                let autoSlideInterval = setInterval(() => {
                    if (!bannerCarousel.matches(':hover')) {
                        const items = bannerCarousel.querySelectorAll('.carousel-item');
                        const activeIndex = Array.from(items).findIndex(item => item.classList.contains('active'));
                        const totalItems = items.length;
                        
                        // Always go to next slide (will wrap automatically)
                        carousel.next();
                        
                        console.log(`Auto-cycling: Banner ${activeIndex + 1} → Banner ${(activeIndex + 1) % totalItems + 1} (Total: ${totalItems})`);
                    }
                }, 2000);
                
                // Pause on hover, resume on mouse leave
                bannerCarousel.addEventListener('mouseenter', () => {
                    clearInterval(autoSlideInterval);
                    carousel.pause();
                    console.log('Banner paused on hover');
                });
                
                bannerCarousel.addEventListener('mouseleave', () => {
                    autoSlideInterval = setInterval(() => {
                        if (!bannerCarousel.matches(':hover')) {
                            carousel.next();
                        }
                    }, 2000);
                    carousel.cycle();
                    console.log('Banner resumed - continuing infinite loop');
                });
                
                // Handle carousel cycle completion
                bannerCarousel.addEventListener('slid.bs.carousel', function (e) {
                    const items = bannerCarousel.querySelectorAll('.carousel-item');
                    const activeIndex = Array.from(items).findIndex(item => item.classList.contains('active'));
                    const totalItems = items.length;
                    
                    // Log successful transition
                    console.log(`✅ Transition complete: Now showing Banner ${activeIndex + 1}/${totalItems}`);
                    
                    // Ensure infinite loop continues
                    if (!bannerCarousel.matches(':hover')) {
                        carousel.cycle();
                    }
                });
                
                console.log('Banner carousel initialized with cover effect and infinite auto-cycle loop');
            }
        });

        // Show quick booking modal with vehicle info
        function showQuickBookingModal(maXe, tenXe, giaThue, hinhAnh) {
            currentVehicleId = maXe;
            currentVehiclePrice = giaThue;
            
            // Set vehicle info in modal
            document.getElementById('modalVehicleName').textContent = tenXe;
            const imageUrl = hinhAnh ? `/images/xe/${hinhAnh}` : '/images/default.jpg';
            document.getElementById('modalVehicleImage').src = imageUrl;
            
            // Set default dates
            const today = new Date();
            const tomorrow = new Date(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            const dayAfter = new Date(today);
            dayAfter.setDate(dayAfter.getDate() + 3);

            document.getElementById('ngayNhanXe').value = tomorrow.toISOString().split('T')[0];
            document.getElementById('ngayTraXe').value = dayAfter.toISOString().split('T')[0];
            
            // Set min date to today
            document.getElementById('ngayNhanXe').min = today.toISOString().split('T')[0];
            document.getElementById('ngayTraXe').min = tomorrow.toISOString().split('T')[0];

            calculatePrice();
            $('#quickBookingModal').modal('show');
        }

        // Calculate price when dates change
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('ngayNhanXe').addEventListener('change', function() {
                // Update min date for ngayTraXe
                const ngayNhanXe = new Date(this.value);
                ngayNhanXe.setDate(ngayNhanXe.getDate() + 1);
                document.getElementById('ngayTraXe').min = ngayNhanXe.toISOString().split('T')[0];
                
                // If ngayTraXe is before ngayNhanXe, update it
                const ngayTraXe = document.getElementById('ngayTraXe').value;
                if (ngayTraXe && new Date(ngayTraXe) <= new Date(this.value)) {
                    document.getElementById('ngayTraXe').value = ngayNhanXe.toISOString().split('T')[0];
                }
                
                calculatePrice();
            });

            document.getElementById('ngayTraXe').addEventListener('change', calculatePrice);
        });

        function calculatePrice() {
            const ngayNhanXe = document.getElementById('ngayNhanXe').value;
            const ngayTraXe = document.getElementById('ngayTraXe').value;
            
            if (ngayNhanXe && ngayTraXe) {
                const startDate = new Date(ngayNhanXe);
                const endDate = new Date(ngayTraXe);
                const dayDiff = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
                
                if (dayDiff > 0) {
                    const tongTien = dayDiff * currentVehiclePrice;
                    
                    document.getElementById('soNgayThue').textContent = dayDiff;
                    document.getElementById('tongTien').textContent = tongTien.toLocaleString() + 'đ';
                } else {
                    document.getElementById('soNgayThue').textContent = '0';
                    document.getElementById('tongTien').textContent = '0đ';
                }
            }
        }

        // Add to cart function
        function addToCart() {
            const ngayNhanXe = document.getElementById('ngayNhanXe').value;
            const ngayTraXe = document.getElementById('ngayTraXe').value;
            const ghiChu = document.getElementById('ghiChu').value;
            
            if (!ngayNhanXe || !ngayTraXe) {
                alert('Vui lòng chọn ngày nhận và trả xe');
                return;
            }

            $.ajax({
                url: '@Url.Action("Add", "Cart")',
                type: 'POST',
                data: {
                    maXe: currentVehicleId,
                    ngayNhanXe: ngayNhanXe,
                    ngayTraXe: ngayTraXe,
                    ghiChu: ghiChu,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        $('#quickBookingModal').modal('hide');
                        alert(response.message);
                        updateCartBadge(response.cartItemCount);
                    } else {
                        alert(response.message);
                    }
                },
                error: function() {
                    alert('Có lỗi xảy ra. Vui lòng thử lại.');
                }
            });
        }

        function updateCartBadge(count) {
            const badge = $('.cart-badge');
            if (count > 0) {
                badge.text(count).show();
            } else {
                badge.hide();
            }
        }
    </script>
}
