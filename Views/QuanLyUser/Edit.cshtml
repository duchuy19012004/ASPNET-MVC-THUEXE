@model bike.ViewModel.EditUserViewModel

@{
    bool isPartial = ViewData["IsPartial"] != null && (bool)ViewData["IsPartial"];
}

@if (!isPartial)
{
    ViewData["Title"] = "Chỉnh sửa người dùng";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="editUserModalLabel">
                    <i class="bi bi-person-gear"></i> Chỉnh sửa người dùng
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            
            <form id="editUserForm" asp-action="Edit" method="post">
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    <input type="hidden" asp-for="Id" />
                    
                    <!-- Alert container for messages -->
                    <div id="alertContainer"></div>
                    
                    <!-- User Info Badge -->
                    <div class="user-info-header mb-4">
                        <div class="d-flex align-items-center justify-content-between p-3 bg-light rounded">
                            <div>
                                <h6 class="mb-1">
                                    <i class="bi bi-person-badge text-primary"></i>
                                    ID: #<span id="userIdDisplay">@Model.Id</span>
                                </h6>
                                <small class="text-muted">Ngày tạo: <span id="userCreateDate">@Model.NgayTao.ToString("dd/MM/yyyy")</span></small>
                            </div>
                            <div>
                                <span class="badge bg-@(Model.IsActive ? "success" : "danger") role-badge" id="userStatusBadge">
                                    @(Model.IsActive ? "Hoạt động" : "Khóa")
                                </span>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <!-- Thông tin cá nhân -->
                        <div class="col-md-6">
                            <h6 class="border-bottom pb-2 mb-3">
                                <i class="bi bi-person-circle text-primary"></i> Thông tin cá nhân
                            </h6>
                            
                            <div class="mb-3">
                                <label asp-for="Ten" class="form-label required">
                                    <i class="bi bi-person"></i> Họ và tên
                                </label>
                                <input asp-for="Ten" class="form-control" placeholder="Nhập họ và tên" />
                                <span asp-validation-for="Ten" class="text-danger"></span>
                            </div>

                            <div class="mb-3">
                                <label asp-for="Email" class="form-label required">
                                    <i class="bi bi-envelope"></i> Email
                                </label>
                                <input asp-for="Email" class="form-control" type="email" placeholder="Nhập email" />
                                <span asp-validation-for="Email" class="text-danger"></span>
                            </div>

                            <div class="mb-3">
                                <label asp-for="SoDienThoai" class="form-label">
                                    <i class="bi bi-telephone"></i> Số điện thoại
                                </label>
                                <input asp-for="SoDienThoai" class="form-control" placeholder="Nhập số điện thoại" />
                                <span asp-validation-for="SoDienThoai" class="text-danger"></span>
                            </div>

                            <div class="mb-3">
                                <label asp-for="DiaChi" class="form-label">
                                    <i class="bi bi-geo-alt"></i> Địa chỉ
                                </label>
                                <textarea asp-for="DiaChi" class="form-control" rows="2" placeholder="Nhập địa chỉ"></textarea>
                                <span asp-validation-for="DiaChi" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Thông tin hệ thống -->
                        <div class="col-md-6">
                            <h6 class="border-bottom pb-2 mb-3">
                                <i class="bi bi-shield-check text-primary"></i> Thông tin hệ thống
                            </h6>
                            
                            <div class="mb-3">
                                <label asp-for="VaiTro" class="form-label required">
                                    <i class="bi bi-person-badge"></i> Vai trò
                                </label>
                                <select asp-for="VaiTro" asp-items="ViewBag.Roles" class="form-select">
                                    <option value="">-- Chọn vai trò --</option>
                                </select>
                                <span asp-validation-for="VaiTro" class="text-danger"></span>
                            </div>

                            <div class="mb-3">
                                <label asp-for="MatKhau" class="form-label">
                                    <i class="bi bi-key"></i> Mật khẩu mới
                                </label>
                                <div class="input-group">
                                    <input asp-for="MatKhau" type="password" class="form-control" placeholder="Để trống nếu không đổi" />
                                    <button type="button" class="btn btn-outline-secondary" onclick="togglePassword('MatKhau')">
                                        <i class="bi bi-eye" id="toggleIcon"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="MatKhau" class="text-danger"></span>
                                <small class="form-text text-muted">
                                    <i class="bi bi-info-circle"></i> Để trống nếu không muốn thay đổi mật khẩu
                                </small>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">
                                    <i class="bi bi-toggle-on"></i> Trạng thái tài khoản
                                </label>
                                <div class="form-check form-switch">
                                    <input asp-for="IsActive" class="form-check-input" type="checkbox" id="isActiveSwitch" />
                                    <label class="form-check-label" for="isActiveSwitch">
                                        <span id="statusText">@(Model.IsActive ? "Hoạt động" : "Khóa")</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle"></i> Hủy
                    </button>
                    <button type="submit" class="btn btn-primary" id="saveUserBtn">
                        <span class="spinner-border spinner-border-sm d-none" role="status"></span>
                        <i class="bi bi-check-circle"></i> Cập nhật
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .required::after {
        content: " *";
        color: red;
    }
    
    .role-badge {
        font-size: 0.8em;
        padding: 0.25em 0.6em;
    }
    
    .user-info-header {
        border-left: 4px solid #0d6efd;
    }
    
    .form-control:focus, .form-select:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }
</style>

<script>
    console.log('✅ Edit User Modal Script Loaded');

    // Toggle password visibility
    function togglePassword(fieldId) {
        const field = document.querySelector(`[name="${fieldId}"]`);
        const icon = document.getElementById('toggleIcon');
        
        if (field && icon) {
            if (field.type === 'password') {
                field.type = 'text';
                icon.className = 'bi bi-eye-slash';
            } else {
                field.type = 'password';
                icon.className = 'bi bi-eye';
            }
        }
    }

    // Show alert message
    function showAlert(message, type) {
        const alertContainer = document.getElementById('alertContainer');
        if (alertContainer) {
            alertContainer.innerHTML = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
        }
    }

    // Clear validation errors
    function clearValidationErrors() {
        document.querySelectorAll('.text-danger').forEach(el => el.textContent = '');
        document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
        const alertContainer = document.getElementById('alertContainer');
        if (alertContainer) {
            alertContainer.innerHTML = '';
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        console.log('🔄 Modal Edit Form - DOMContentLoaded');
        
        // Status switch functionality
        const statusSwitch = document.getElementById('isActiveSwitch');
        const statusText = document.getElementById('statusText');
        const statusBadge = document.getElementById('userStatusBadge');
        
        if (statusSwitch && statusText && statusBadge) {
            statusSwitch.addEventListener('change', function() {
                if (this.checked) {
                    statusText.textContent = 'Hoạt động';
                    statusBadge.textContent = 'Hoạt động';
                    statusBadge.className = 'badge bg-success role-badge';
                } else {
                    statusText.textContent = 'Khóa';
                    statusBadge.textContent = 'Khóa';
                    statusBadge.className = 'badge bg-danger role-badge';
                }
            });
        }

        // Form submission
        const editForm = document.getElementById('editUserForm');
        if (editForm) {
            console.log('✅ Form found, setting up submission handler');
            
            editForm.addEventListener('submit', function(e) {
                e.preventDefault();
                console.log('📤 Form submission started');
                
                const submitBtn = document.getElementById('saveUserBtn');
                const spinner = submitBtn.querySelector('.spinner-border');
                const btnText = submitBtn.querySelector('i.bi-check-circle');
                
                // Clear previous errors
                clearValidationErrors();
                
                // Show loading state
                spinner.classList.remove('d-none');
                btnText.style.display = 'none';
                submitBtn.disabled = true;
                
                // Prepare form data
                const formData = new FormData(this);
                
                console.log('📋 Submitting form data:', Object.fromEntries(formData));
                
                // Submit via AJAX
                fetch(this.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => {
                    console.log('📨 Response received:', response.status);
                    
                    if (response.headers.get('content-type')?.includes('application/json')) {
                        return response.json();
                    } else {
                        throw new Error('Server returned non-JSON response');
                    }
                })
                .then(data => {
                    console.log('✅ Response data:', data);
                    
                    if (data.success) {
                        console.log('🎉 Update successful!');
                        showAlert('Cập nhật người dùng thành công!', 'success');
                        
                        // Close modal and refresh page after 1 second
                        setTimeout(() => {
                            const modal = bootstrap.Modal.getInstance(document.getElementById('editUserModal'));
                            if (modal) {
                                modal.hide();
                            }
                            location.reload();
                        }, 1000);
                    } else {
                        console.log('❌ Update failed:', data.message);
                        showAlert(data.message || 'Có lỗi xảy ra khi cập nhật!', 'danger');
                        
                        // Show validation errors
                        if (data.errors) {
                            for (const [field, messages] of Object.entries(data.errors)) {
                                const input = document.querySelector(`[name="${field}"]`);
                                if (input) {
                                    input.classList.add('is-invalid');
                                    const errorSpan = input.parentElement.querySelector('.text-danger');
                                    if (errorSpan) {
                                        errorSpan.textContent = messages[0];
                                    }
                                }
                            }
                        }
                    }
                })
                .catch(error => {
                    console.error('💥 Error:', error);
                    showAlert('Có lỗi xảy ra khi cập nhật: ' + error.message, 'danger');
                })
                .finally(() => {
                    // Restore button state
                    spinner.classList.add('d-none');
                    btnText.style.display = 'inline';
                    submitBtn.disabled = false;
                    console.log('✅ Button state restored');
                });
            });
        }
    });
</script> 