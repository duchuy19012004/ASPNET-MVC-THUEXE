@model IEnumerable<bike.Models.User>

@{
    ViewData["Title"] = "Quản lý người dùng";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>
    .page-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
        border-radius: 15px;
        margin-bottom: 30px;
    }

    .user-table {
        background: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
    }

    .role-badge {
        padding: 5px 15px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .role-admin {
        background: #dc3545;
        color: white;
    }

    .role-staff {
        background: #17a2b8;
        color: white;
    }

    .role-user {
        background: #28a745;
        color: white;
    }

    .status-active {
        color: #28a745;
    }

    .status-inactive {
        color: #dc3545;
    }
</style>

<div class="container-fluid">
    <!-- Header -->
    <div class="page-header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1><i class="bi bi-people"></i> Quản lý người dùng</h1>
                <p class="mb-0">Quản lý tài khoản và phân quyền người dùng</p>
            </div>
            <a asp-action="Create" class="btn btn-light">
                <i class="bi bi-plus-circle"></i> Thêm người dùng
            </a>
        </div>
    </div>

    <!-- Success/Error messages -->
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show">
            <i class="bi bi-check-circle"></i> @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show">
            <i class="bi bi-exclamation-circle"></i> @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Table -->
    <div class="user-table">
        <table class="table table-hover mb-0">
            <thead class="table-light">
                <tr>
                    <th>ID</th>
                    <th>Họ tên</th>
                    <th>Email</th>
                    <th>Số điện thoại</th>
                    <th>Vai trò</th>
                    <th>Trạng thái</th>
                    <th>Ngày tạo</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Model)
                {
                    <tr>
                        <td>#@user.Id</td>
                        <td>
                            <strong>@user.Ten</strong>
                        </td>
                        <td>@user.Email</td>
                        <td>@(user.SoDienThoai ?? "N/A")</td>
                        <td>
                            @{
                                string roleClass = user.VaiTro switch
                                {
                                    "Admin" => "role-admin",
                                    "Staff" => "role-staff",
                                    _ => "role-user"
                                };
                                string roleText = user.VaiTro switch
                                {
                                    "Admin" => "Quản trị",
                                    "Staff" => "Nhân viên",
                                    _ => "Khách hàng"
                                };
                            }
                            <span class="role-badge @roleClass">@roleText</span>
                        </td>
                        <td>
                            @if (user.IsActive)
                            {
                                <i class="bi bi-check-circle status-active"></i>
                                <span>Hoạt động</span>
                            }
                            else
                            {
                                <i class="bi bi-x-circle status-inactive"></i>
                                <span>Khóa</span>
                            }
                        </td>
                        <td>@user.NgayTao.ToString("dd/MM/yyyy")</td>
                        <td>
                            <button class="btn btn-sm btn-warning" title="Sửa" 
                                    onclick="openEditModal(@user.Id, '@user.Ten', '@user.Email', '@user.SoDienThoai', '@user.DiaChi', '@user.VaiTro', @user.IsActive.ToString().ToLower(), '@user.NgayTao.ToString("dd/MM/yyyy")')">
                                <i class="bi bi-pencil"></i>
                            </button>
                            @if (user.Id != int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value))
                            {
                                <button class="btn btn-sm btn-danger" title="Xóa" 
                                        onclick="confirmDelete(@user.Id, '@user.Ten')">
                                    <i class="bi bi-trash"></i>
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Include Edit Modal -->
<div id="editModalContainer"></div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteConfirmLabel">
                    <i class="bi bi-exclamation-triangle"></i> Xác nhận xóa
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="text-center">
                    <i class="bi bi-person-x text-danger" style="font-size: 3rem;"></i>
                    <h5 class="mt-3">Bạn có chắc chắn muốn xóa người dùng?</h5>
                    <p class="text-muted">Tên: <strong id="deleteUserName"></strong></p>
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i>
                        Hành động này không thể hoàn tác!
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle"></i> Hủy
                </button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <span class="spinner-border spinner-border-sm d-none" role="status"></span>
                    <i class="bi bi-trash"></i> Xóa người dùng
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    let currentUserId = 0;

    // Open edit modal
    function openEditModal(id, ten, email, soDienThoai, diaChi, vaiTro, isActive, ngayTao) {
        currentUserId = id;
        console.log('🔄 Opening edit modal for user:', id);
        
        // Load modal content via AJAX
        fetch(`/QuanLyUser/Edit/${id}`)
            .then(response => {
                console.log('📨 Modal content response:', response.status);
                return response.text();
            })
            .then(html => {
                console.log('📝 Modal HTML loaded, length:', html.length);
                document.getElementById('editModalContainer').innerHTML = html;
                
                // Wait a moment for DOM to update
                setTimeout(() => {
                    // Initialize modal
                    const editModal = new bootstrap.Modal(document.getElementById('editUserModal'));
                    
                    // Populate form with data
                    populateEditForm({
                        id: id,
                        ten: ten,
                        email: email,
                        soDienThoai: soDienThoai || '',
                        diaChi: diaChi || '',
                        vaiTro: vaiTro,
                        isActive: isActive,
                        ngayTao: ngayTao
                    });
                    
                    // Show modal
                    console.log('📱 Showing modal');
                    editModal.show();
                }, 100);
            })
            .catch(error => {
                console.error('❌ Error loading edit modal:', error);
                showNotification('Có lỗi xảy ra khi tải form chỉnh sửa!', 'error');
            });
    }

    // Populate edit form with user data
    function populateEditForm(userData) {
        console.log('📝 Populating form with data:', userData);
        
        const form = document.getElementById('editUserForm');
        if (!form) {
            console.error('❌ Form not found');
            return;
        }
        
        console.log('✅ Form found, updating action URL');
        // Update form action URL
        form.action = `/QuanLyUser/Edit/${userData.id}`;
        
        // Add hidden field to identify this as a modal submission
        const existingHidden = form.querySelector('input[name="isModal"]');
        if (!existingHidden) {
            const hiddenField = document.createElement('input');
            hiddenField.type = 'hidden';
            hiddenField.name = 'isModal';
            hiddenField.value = 'true';
            form.appendChild(hiddenField);
            console.log('✅ Added isModal hidden field');
        }
        
        // Set input values
        const inputs = {
            'Id': userData.id,
            'Ten': userData.ten,
            'Email': userData.email,
            'SoDienThoai': userData.soDienThoai,
            'DiaChi': userData.diaChi,
            'VaiTro': userData.vaiTro,
            'IsActive': userData.isActive,
            'MatKhau': '' // Clear password field
        };
        
        console.log('📋 Setting input values');
        for (const [name, value] of Object.entries(inputs)) {
            const input = form.querySelector(`[name="${name}"]`);
            if (input) {
                if (input.type === 'checkbox') {
                    input.checked = value;
                    console.log(`✅ Set ${name} checkbox:`, value);
                } else {
                    input.value = value || '';
                    console.log(`✅ Set ${name}:`, value);
                }
            } else {
                console.warn(`⚠️ Input not found: ${name}`);
            }
        }
        
        // Update display elements
        const userIdDisplay = document.getElementById('userIdDisplay');
        const userCreateDate = document.getElementById('userCreateDate');
        const userStatusBadge = document.getElementById('userStatusBadge');
        const statusText = document.getElementById('statusText');
        
        if (userIdDisplay) {
            userIdDisplay.textContent = userData.id;
            console.log('✅ Updated user ID display');
        }
        if (userCreateDate) {
            userCreateDate.textContent = userData.ngayTao;
            console.log('✅ Updated create date');
        }
        
        if (userStatusBadge) {
            userStatusBadge.textContent = userData.isActive ? 'Hoạt động' : 'Khóa';
            userStatusBadge.className = `badge bg-${userData.isActive ? 'success' : 'danger'} role-badge`;
            console.log('✅ Updated status badge');
        }
        
        if (statusText) {
            statusText.textContent = userData.isActive ? 'Hoạt động' : 'Khóa';
            console.log('✅ Updated status text');
        }
        
        console.log('🎉 Form population completed');
    }

    // Show delete confirmation
    function confirmDelete(id, name) {
        currentUserId = id;
        document.getElementById('deleteUserName').textContent = name;
        
        const deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
        deleteModal.show();
    }

    // Handle delete confirmation
    document.addEventListener('DOMContentLoaded', function() {
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
        if (confirmDeleteBtn) {
            confirmDeleteBtn.addEventListener('click', function() {
                const spinner = this.querySelector('.spinner-border');
                const btnIcon = this.querySelector('i.bi-trash');
                
                // Show loading state
                spinner.classList.remove('d-none');
                btnIcon.style.display = 'none';
                this.disabled = true;
                
                // Send delete request
                fetch(`/QuanLyUser/Delete/${currentUserId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]')?.value
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Success - close modal and refresh page
                        bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal')).hide();
                        showNotification('Xóa người dùng thành công!', 'success');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showNotification(data.message || 'Có lỗi xảy ra khi xóa!', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Có lỗi xảy ra khi xóa!', 'error');
                })
                .finally(() => {
                    // Hide loading state
                    spinner.classList.add('d-none');
                    btnIcon.style.display = 'inline';
                    this.disabled = false;
                });
            });
        }
    });

    // Show notification function
    function showNotification(message, type) {
        const notification = document.createElement('div');
        notification.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show position-fixed`;
        notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        notification.innerHTML = `
            <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(notification);
        
        // Auto remove after 3 seconds
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 3000);
    }

    // Auto-dismiss alerts after 5 seconds
    document.addEventListener('DOMContentLoaded', function() {
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
            if (!alert.classList.contains('position-fixed')) {
                setTimeout(() => {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                }, 5000);
            }
        });
    });
</script>